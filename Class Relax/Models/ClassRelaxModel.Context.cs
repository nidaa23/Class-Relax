//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Class_Relax.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ClassRelaxDbContext : DbContext
    {
        public ClassRelaxDbContext()
            : base("name=ClassRelaxDbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
    
        public virtual int classFeedback(Nullable<int> classPin)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("classFeedback", classPinParameter);
        }
    
        public virtual int sp_algGetVideoA1(Nullable<int> classPin, string type, string mTag, Nullable<int> length)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var mTagParameter = mTag != null ?
                new ObjectParameter("MTag", mTag) :
                new ObjectParameter("MTag", typeof(string));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_algGetVideoA1", classPinParameter, typeParameter, mTagParameter, lengthParameter);
        }
    
        public virtual ObjectResult<sp_algGetVideoA3_Result> sp_algGetVideoA3(Nullable<int> classPin, string type, string mTag, Nullable<int> length)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var mTagParameter = mTag != null ?
                new ObjectParameter("MTag", mTag) :
                new ObjectParameter("MTag", typeof(string));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_algGetVideoA3_Result>("sp_algGetVideoA3", classPinParameter, typeParameter, mTagParameter, lengthParameter);
        }
    
        public virtual ObjectResult<sp_algGetVideoB1_Result> sp_algGetVideoB1(Nullable<int> classPin, string type, string mTag, Nullable<int> length)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var mTagParameter = mTag != null ?
                new ObjectParameter("MTag", mTag) :
                new ObjectParameter("MTag", typeof(string));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_algGetVideoB1_Result>("sp_algGetVideoB1", classPinParameter, typeParameter, mTagParameter, lengthParameter);
        }
    
        public virtual int sp_algGetVideoC1(Nullable<int> classPin, string type, string mTag, Nullable<int> length)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var mTagParameter = mTag != null ?
                new ObjectParameter("MTag", mTag) :
                new ObjectParameter("MTag", typeof(string));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_algGetVideoC1", classPinParameter, typeParameter, mTagParameter, lengthParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_classMood_Result> sp_classMood(Nullable<int> classPin)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_classMood_Result>("sp_classMood", classPinParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_deleteStudentFromClass(Nullable<int> pinclass)
        {
            var pinclassParameter = pinclass.HasValue ?
                new ObjectParameter("pinclass", pinclass) :
                new ObjectParameter("pinclass", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteStudentFromClass", pinclassParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_updateAVGFeedback(Nullable<int> classPin)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateAVGFeedback", classPinParameter);
        }
    
        public virtual int sp_updateNumOfStudents(Nullable<int> classPin)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateNumOfStudents", classPinParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_class_insert(Nullable<long> classPin, string className, Nullable<int> numOfStudents, Nullable<double> avgFeedback, Nullable<int> iDVideo, Nullable<System.DateTime> date, Nullable<int> userID, Nullable<int> duration, string type, string style)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(long));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var numOfStudentsParameter = numOfStudents.HasValue ?
                new ObjectParameter("NumOfStudents", numOfStudents) :
                new ObjectParameter("NumOfStudents", typeof(int));
    
            var avgFeedbackParameter = avgFeedback.HasValue ?
                new ObjectParameter("AvgFeedback", avgFeedback) :
                new ObjectParameter("AvgFeedback", typeof(double));
    
            var iDVideoParameter = iDVideo.HasValue ?
                new ObjectParameter("IDVideo", iDVideo) :
                new ObjectParameter("IDVideo", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var styleParameter = style != null ?
                new ObjectParameter("Style", style) :
                new ObjectParameter("Style", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_class_insert", classPinParameter, classNameParameter, numOfStudentsParameter, avgFeedbackParameter, iDVideoParameter, dateParameter, userIDParameter, durationParameter, typeParameter, styleParameter);
        }
    
        public virtual int usp_student_insert(string nickname, Nullable<long> classPin, string mood, Nullable<int> feedback)
        {
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(long));
    
            var moodParameter = mood != null ?
                new ObjectParameter("Mood", mood) :
                new ObjectParameter("Mood", typeof(string));
    
            var feedbackParameter = feedback.HasValue ?
                new ObjectParameter("Feedback", feedback) :
                new ObjectParameter("Feedback", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_student_insert", nicknameParameter, classPinParameter, moodParameter, feedbackParameter);
        }
    
        public virtual int usp_thestudent_insert(string nickname, Nullable<long> classPin, string mood, Nullable<int> feedback)
        {
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(long));
    
            var moodParameter = mood != null ?
                new ObjectParameter("Mood", mood) :
                new ObjectParameter("Mood", typeof(string));
    
            var feedbackParameter = feedback.HasValue ?
                new ObjectParameter("Feedback", feedback) :
                new ObjectParameter("Feedback", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_thestudent_insert", nicknameParameter, classPinParameter, moodParameter, feedbackParameter);
        }
    
        public virtual int videoFeedback(Nullable<int> videoID, Nullable<int> classPin)
        {
            var videoIDParameter = videoID.HasValue ?
                new ObjectParameter("videoID", videoID) :
                new ObjectParameter("videoID", typeof(int));
    
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("videoFeedback", videoIDParameter, classPinParameter);
        }
    
        public virtual ObjectResult<LoginByUsernamePassword_Result> LoginByUsernamePassword(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginByUsernamePassword_Result>("LoginByUsernamePassword", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetVideoA1(Nullable<int> classPin, string type, string mTag, Nullable<int> length)
        {
            var classPinParameter = classPin.HasValue ?
                new ObjectParameter("ClassPin", classPin) :
                new ObjectParameter("ClassPin", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var mTagParameter = mTag != null ?
                new ObjectParameter("MTag", mTag) :
                new ObjectParameter("MTag", typeof(string));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetVideoA1", classPinParameter, typeParameter, mTagParameter, lengthParameter);
        }
    }
}
